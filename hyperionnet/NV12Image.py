# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hyperionnet

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NV12Image(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NV12Image()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNV12Image(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NV12Image
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NV12Image
    def YData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # NV12Image
    def YDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # NV12Image
    def YDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NV12Image
    def YDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # NV12Image
    def UvData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # NV12Image
    def UvDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # NV12Image
    def UvDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NV12Image
    def UvDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # NV12Image
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # NV12Image
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # NV12Image
    def StrideY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # NV12Image
    def StrideUv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

def NV12ImageStart(builder):
    builder.StartObject(6)

def Start(builder):
    NV12ImageStart(builder)

def NV12ImageAddYData(builder, yData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(yData), 0)

def AddYData(builder, yData):
    NV12ImageAddYData(builder, yData)

def NV12ImageStartYDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartYDataVector(builder, numElems):
    return NV12ImageStartYDataVector(builder, numElems)

def NV12ImageAddUvData(builder, uvData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(uvData), 0)

def AddUvData(builder, uvData):
    NV12ImageAddUvData(builder, uvData)

def NV12ImageStartUvDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartUvDataVector(builder, numElems):
    return NV12ImageStartUvDataVector(builder, numElems)

def NV12ImageAddWidth(builder, width):
    builder.PrependInt32Slot(2, width, -1)

def AddWidth(builder, width):
    NV12ImageAddWidth(builder, width)

def NV12ImageAddHeight(builder, height):
    builder.PrependInt32Slot(3, height, -1)

def AddHeight(builder, height):
    NV12ImageAddHeight(builder, height)

def NV12ImageAddStrideY(builder, strideY):
    builder.PrependInt32Slot(4, strideY, -1)

def AddStrideY(builder, strideY):
    NV12ImageAddStrideY(builder, strideY)

def NV12ImageAddStrideUv(builder, strideUv):
    builder.PrependInt32Slot(5, strideUv, -1)

def AddStrideUv(builder, strideUv):
    NV12ImageAddStrideUv(builder, strideUv)

def NV12ImageEnd(builder):
    return builder.EndObject()

def End(builder):
    return NV12ImageEnd(builder)
