# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hyperionnet

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Reply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Reply()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReply(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Reply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Reply
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reply
    def Video(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # Reply
    def Registered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

def ReplyStart(builder):
    builder.StartObject(3)

def Start(builder):
    ReplyStart(builder)

def ReplyAddError(builder, error):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(error), 0)

def AddError(builder, error):
    ReplyAddError(builder, error)

def ReplyAddVideo(builder, video):
    builder.PrependInt32Slot(1, video, -1)

def AddVideo(builder, video):
    ReplyAddVideo(builder, video)

def ReplyAddRegistered(builder, registered):
    builder.PrependInt32Slot(2, registered, -1)

def AddRegistered(builder, registered):
    ReplyAddRegistered(builder, registered)

def ReplyEnd(builder):
    return builder.EndObject()

def End(builder):
    return ReplyEnd(builder)
